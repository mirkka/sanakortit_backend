service: serverless-graphql-appsync-lda

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${self:custom.region}:*:*"

layers:
  commonLibs:
    path: layer

plugins:
  - serverless-appsync-plugin

functions:
  deleteDeckResolver:
    handler: lambda/deleteDeckResolver.handler
    layers:
      - {Ref: CommonLibsLambdaLayer}
  createCardResolver:
    handler: lambda/createCardResolver.handler
  updateCardsResolver:
    handler: lambda/updateCardsResolver.handler
  updateStudyCardResolver:
    handler: lambda/updateStudyCardResolver.handler
  getStudyCardResolver:
    handler: lambda/getStudyCardResolver.handler
  dueResolver:
    handler: lambda/dueResolver.handler
  amountResolver:
    handler: lambda/amountResolver.handler
  searchCardsResolver:
    handler: lambda/searchCardsResolver.handler
  listTagsResolver:
    handler: lambda/listTagsResolver.handler
  listDecksResolver:
    handler: lambda/listDecksResolver.handler
  preSignUp:
    handler: lambda/preSignUp.handler
    events:
    - CognitoUserPoolMyUserPool:
        pool: sanakortit-user-pool
        trigger: PreSignUp


custom:
  accountId: 997315957991
  region: 'eu-central-1'
  appSync:
    name:  APIsanakortit
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: eu-central-1
      defaultAction: ALLOW
      userPoolId: { Ref: CognitoUserPoolMyUserPool }
    dataSources:
    - type: AMAZON_DYNAMODB
      name: DeckTable
      description: "DynamoDB Deck Table"
      config:
        tableName: { Ref: DeckTable }
    - type: AMAZON_DYNAMODB
      name: CardTable
      description: "DynamoDB Card Table"
      config:
        tableName: { Ref: CardTable }
    - type: AWS_LAMBDA
      name: deleteDeckResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-deleteDeckResolver"
    - type: AWS_LAMBDA
      name: createCardResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-createCardResolver"
    - type: AWS_LAMBDA
      name: updateCardsResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-updateCardsResolver"
    - type: AWS_LAMBDA
      name: updateStudyCardResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-updateStudyCardResolver"
    - type: AWS_LAMBDA
      name: getStudyCardResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-getStudyCardResolver"
    - type: AWS_LAMBDA
      name: dueResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-dueResolver"
    - type: AWS_LAMBDA
      name: amountResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-amountResolver"
    - type: AWS_LAMBDA
      name: searchCardsResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-searchCardsResolver"
    - type: AWS_LAMBDA
      name: listTagsResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-listTagsResolver"
    - type: AWS_LAMBDA
      name: listDecksResolver
      description: 'Lambda DataSource'
      config:
        lambdaFunctionArn: "arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:serverless-graphql-appsync-lda-dev-listDecksResolver"
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      - dataSource: DeckTable
        type: Mutation
        field: createDeck
        request: "createDeckResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: DeckTable
        type: Mutation
        field: updateDeck
        request: "updateDeckResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: CardTable
        type: Mutation
        field: updateCard
        request: "updateCardResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: CardTable
        type: Mutation
        field: deleteCard
        request: "deleteCardResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: DeckTable
        type: Query
        field: getDeck
        request: "getDeckResolver-request.txt"
        response: "itemForUser-response.txt"
      - dataSource: CardTable
        type: Query
        field: getCard
        request: "getCardResolver-request.txt"
        response: "itemForUser-response.txt"
      - dataSource: CardTable
        type: Query
        field: listCards
        request: "listCardsResolver-request.txt"
        response: "listItemsForUser-response.txt"
      # lambda datasource resolvers
      - dataSource: dueResolver
        type: Deck
        field: due
        request: "dueResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: amountResolver
        type: Deck
        field: cardAmount
        request: "amountResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: listDecksResolver
        type: Query
        field: listDecks
        request: "listDecksResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: deleteDeckResolver
        type: Mutation
        field: deleteDeck
        request: "deleteDeckResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: createCardResolver
        type: Mutation
        field: createCard
        request: "createCardResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: updateCardsResolver
        type: Mutation
        field: updateCards
        request: "updateCardsResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: updateStudyCardResolver
        type: Mutation
        field: updateStudyCard
        request: "updateStudyCardResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: getStudyCardResolver
        type: Query
        field: studyCard
        request: "getStudyCardResolver-request.txt"
        response: "generic-response.txt"
      - dataSource: searchCardsResolver
        type: Query
        field: searchCards
        request: "searchCardsResolver-request.txt"
        response: "listItemsForUser-response.txt"
      - dataSource: listTagsResolver
        type: Query
        field: listTags
        request: "listTagsResolver-request.txt"
        response: "generic-response.txt"
    schema: 'schema.graphql'

resources:
  Resources:
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /service-role/
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:eu-central-1:${self:custom.accountId}:function:*"
    DeckTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: "DeckTable"
    CardTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: deckId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: "CardTable"
        GlobalSecondaryIndexes:
          - IndexName: deckId-index
            KeySchema:
            - AttributeName: deckId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    AppSyncDynamoDBPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: "Managed Policy to allow AWS AppSync to access tables in DynamoDB"
        Path: /service-role/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: "*"

    DynamoDBRole:
      Type: "AWS::IAM::Role"
      Description: "IAM Role for allowing AppSync to access DynamoDB"
      DependsOn:
        - AppSyncDynamoDBPolicy
      Properties:
        RoleName: APIsanakortit-appsync-dynamodb-role
        ManagedPolicyArns:
          - Ref: AppSyncDynamoDBPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - appsync.amazonaws.com
    CognitoUserPoolMyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: sanakortit-user-pool
        LambdaConfig:
          PreSignUp:
            "Fn::GetAtt": [ PreSignUpLambdaFunction, Arn ]
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: sanakortit_app
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
    MyLambdaInvocationPermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - CognitoUserPoolMyUserPool
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          "Fn::GetAtt": [ PreSignUpLambdaFunction, Arn ]
        Principal: cognito-idp.amazonaws.com
        SourceArn:
          "Fn::GetAtt": [ CognitoUserPoolMyUserPool, Arn ]
Outputs:
  UserPoolId:
    Value:
      Ref: sanakortit-user-pool

  UserPoolClientId:
    Value:
      Ref: sanakortit_app
